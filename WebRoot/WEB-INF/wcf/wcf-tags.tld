<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN" "http://java.sun.com/dtd/web-jsptaglibrary_1_2.dtd">
<taglib>
<tlib-version>1.0</tlib-version>
<jsp-version>1.2</jsp-version>
<short-name>Web Component Framework Tags</short-name>
<uri>http://www.tonbeller.com/wcf</uri>
<display-name>Web Component Framework Tags</display-name>
<description>
    Web Component Framework (WCF) tag library. A collection of reuseable JSP tags like
    tree, table, HTML form and XSL rendering.
  </description>
<tag>
<name>catedit</name>
<tag-class>com.tonbeller.wcf.catedit.CategoryEditorTag</tag-class>
<body-content>EMPTY</body-content>
<description>Creates a categoy editor component. This component does not produce visible output directly, it must be rendered via the WCF render tag.</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>model</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that resolves to a com.tonbeller.wcf.catedit.CategoryModel</description>
</attribute>
</tag>
<tag>
<name>confirm</name>
<tag-class>com.tonbeller.wcf.form.ConfirmComponentTag</tag-class>
<body-content>tagdependent</body-content>
<description>A confirmation dialog. Used by other Components, not stand-alone</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>xmlUri</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>
    Path of an XML config file that describes the HTML form, relative to the application context.
    There may be different form descriptions for different Locales, the
    stylesheet will be choosen upon similar rules to ResourceBundle.
    
    Example: xmlUri='/WEB-INF/myform.xml'. For a german
    Browser WCF will try to load /WEB-INF/myform_de.xml.
    If this fails, it will load /WEB-INF/myform.xml.
  </description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
</tag>
<tag>
<name>connect</name>
<tag-class>com.tonbeller.wcf.form.ConnectFormTag</tag-class>
<body-content>EMPTY</body-content>
<description>Connects different WCF Components. This makes the buttons
    of one form act on another form too. If a tree and a form are connected for example,
    pressing the OK button in the form will make the tree read its selection.</description>
<attribute>
<name>form1</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Form 1</description>
</attribute>
<attribute>
<name>form2</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Form 2</description>
</attribute>
</tag>
<tag>
<name>form</name>
<tag-class>com.tonbeller.wcf.form.FormComponentTag</tag-class>
<body-content>tagdependent</body-content>
<description>
      Creates an HTML form that is defined by an XML file.
      Diese Komponente erzeugt selbst keinen sichtbaren Output, sie wird durch das WCF render Tag dargestellt.
      Structure of the XML File
&lt;xform style="twocolumn"&gt;
  &lt;title value="Form Demo"&gt;
    &lt;imgButton label="Cancel" .../&gt;
  &lt;/title&gt;
  &lt;textField type="int" modelReference="intValue" label="Count" .../&gt;
  &lt;checkBox modelReference="${nestedBean.boolValue}" label="Check Me" .../&gt;
&lt;/xform&gt;

      creates a Form with a title, a close button in the upper right corner, a text input field
      and a check box.
      Data binding
      The form component is associated with a JavaBean. The input elements of the HTML
      form are bound to the bean properties via the modelReference attribute.
      The bean in the above example has an int property with the name intValue
      that can be modified by the &lt;textField ...&gt;.
      As shown in the check box example, the modelReference may contain
      an EL (JSTL Expression Language) expression.
      
      Valid type attribute values:
      booleanstringdateintposint - integer &gt;= 0doubleemailElement IDs
      The names of the HTTP parameters are generated by random. If this is not desired,
      you can use the id attribute.


&lt;xform style="twocolumn"&gt;
  &lt;textField id="field1" .../&gt;
  &lt;checkBox id="$id.field2" .../&gt;
&lt;/xform&gt;


      creates two HTML input fields, the first with
      name="field1", the second with name="myform.field2", where myform
      is the id attribute of this form tag.

      Form Elements
      The elements are rendered via /WEB-INF/wcf/controls.xsl. Please
      look there for details.
      labeltextFieldtextAreapasswordcheckBoxradioButtonlistBox1listBoxNimgButtonbutton
      Use disabled="true" to make elements read-only.

      Form Buttons

       Default  ButtonHandler.
       Supports the following attributes
       action="revert" -
            calls revert() on the Form, i.e. reads
            the bean properties and formats
            the data for presentation.
         action="validate" -
             calls validate() on the Form, i.e. parses
             user input and writes the values to the bean properties
         forward="/some/page.jsp" -
             if validation succeeds forwards to another page. Paramers make sense here.
         hide="true" -
             if validation succeeds hides the component
         successAttr="name-of-request-attribute" -
             if validation succeeds a request attribute with value true
             is created.
         </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>xmlUri</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>
    Path of an XML config file that describes the HTML form, relative to the application context.
    There may be different form descriptions for different Locales, the
    stylesheet will be choosen upon similar rules to ResourceBundle.
    
    Example: xmlUri='/WEB-INF/myform.xml'. For a german
    Browser WCF will try to load /WEB-INF/myform_de.xml.
    If this fails, it will load /WEB-INF/myform.xml.
  </description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>model</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that resolves to the bean that shall be edited</description>
</attribute>
</tag>
<tag>
<name>formbutton</name>
<tag-class>com.tonbeller.wcf.toolbar.FormButtonTag</tag-class>
<body-content>empty</body-content>
<description>Submit button for a WCF form</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>ID of the button. The button may be accessed in EL as TOOLBAR_ID.buttons.BUTTON_ID</description>
</attribute>
<attribute>
<name>img</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the image to use. The generated URLs are APPCONTEXT/wcf/toolbar/IMG-up.png and APPCONTEXT/wcf/toolbar/IMG-down.png</description>
</attribute>
<attribute>
<name>radioGroup</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of a radio group. At most one button of a group may be pressed.</description>
</attribute>
<attribute>
<name>tooltip</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>name of the tooltip in the toolbars ResourceBundle</description>
</attribute>
<attribute>
<name>visibleRef</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to a boolean property. The button will be visible only, if that property is true</description>
</attribute>
<attribute>
<name>action</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>either "revert" or "validate"</description>
</attribute>
<attribute>
<name>forward</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>URI of the JSP to display if validation succeeds</description>
</attribute>
<attribute>
<name>form</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to the form to validate</description>
</attribute>
</tag>
<tag>
<name>imgbutton</name>
<tag-class>com.tonbeller.wcf.toolbar.ImgButtonTag</tag-class>
<body-content>empty</body-content>
<description>A toolbar button with a static hyperlink</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>ID of the button. The button may be accessed in EL as TOOLBAR_ID.buttons.BUTTON_ID</description>
</attribute>
<attribute>
<name>img</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the image to use. The generated URLs are APPCONTEXT/wcf/toolbar/IMG-up.png and APPCONTEXT/wcf/toolbar/IMG-down.png</description>
</attribute>
<attribute>
<name>tooltip</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>name of the tooltip in the toolbars ResourceBundle</description>
</attribute>
<attribute>
<name>visibleRef</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to a boolean property. The button will be visible only, if that property is true</description>
</attribute>
<attribute>
<name>href</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>the href attribute of the hyperlink</description>
</attribute>
<attribute>
<name>target</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>the target attribute of the hyperlink</description>
</attribute>
</tag>
<tag>
<name>include</name>
<tag-class>com.tonbeller.wcf.utils.IncludeTag</tag-class>
<body-content>EMPTY</body-content>
<description>
      Includes a JSP page if a certain HTTP parameter is present.
      The name of the file is prefix + paremeter + suffix. 
      For example,
      if prefix="/WEB-INF/mypages/", httpParam="page" and
      suffix=".jsp", then the URL ?page=page20 will include
      the file /WEB-INF/mypages/page20.jsp. If the parameter page
      is not present in the HTTP request, no page will be included.
    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>httpParam</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>name of the HTTP parameter</description>
</attribute>
<attribute>
<name>prefix</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Prefix</description>
</attribute>
<attribute>
<name>suffix</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Suffix</description>
</attribute>
</tag>
<tag>
<name>logform</name>
<tag-class>com.tonbeller.wcf.log.LogTag</tag-class>
<body-content>JSP</body-content>
<description>
     An HTML form that allows to set logging options for Apache log4j
    </description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>xmlUri</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>
    Path of an XML config file that describes the HTML form, relative to the application context.
    There may be different form descriptions for different Locales, the
    stylesheet will be choosen upon similar rules to ResourceBundle.
    
    Example: xmlUri='/WEB-INF/myform.xml'. For a german
    Browser WCF will try to load /WEB-INF/myform_de.xml.
    If this fails, it will load /WEB-INF/myform.xml.
  </description>
</attribute>
<attribute>
<name>logDir</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>
        Name of a directory relative to user.home or - in case of missing write permissions -
        relative to java.io.tmpdir. This directory contains the configuration files
        for log4j, default configuration files are created.
      </description>
</attribute>
</tag>
<tag>
<name>pushbutton</name>
<tag-class>com.tonbeller.wcf.toolbar.PushButtonTag</tag-class>
<body-content>empty</body-content>
<description>A toolbar button with builtin boolean property pressed that reflects its state.</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>ID of the button. The button may be accessed in EL as TOOLBAR_ID.buttons.BUTTON_ID</description>
</attribute>
<attribute>
<name>img</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the image to use. The generated URLs are APPCONTEXT/wcf/toolbar/IMG-up.png and APPCONTEXT/wcf/toolbar/IMG-down.png</description>
</attribute>
<attribute>
<name>radioGroup</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of a radio group. At most one button of a group may be pressed.</description>
</attribute>
<attribute>
<name>tooltip</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>name of the tooltip in the toolbars ResourceBundle</description>
</attribute>
<attribute>
<name>visibleRef</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to a boolean property. The button will be visible only, if that property is true</description>
</attribute>
<attribute>
<name>pressed</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>inital state</description>
</attribute>
</tag>
<tag>
<name>render</name>
<tag-class>com.tonbeller.wcf.component.RendererTag</tag-class>
<body-content>JSP</body-content>
<description>
      WCF components produce XML Documents (DOM) internally which is transformed via XSLT into the
      outputformat by this tag. The output format will be HTML most of the time,
      but may be any other text format like CSV for example.
      
      The render tag will not produce any output for components that
      are not visible.

      

      The body may contain renderParam tags that supply
      parameters for rendering. The following
      stylesheet parameters are provided automatically (w/o nested parameter tag):
      renderId - contains the id of this tag. If not set the modelReference is takencontext - the context path of the application for building URLs
      Parameters may occur in xsl (via standard &lt;xsl:param .. &gt;) and in the DOM.
      The render tag searches for &lt;param name=".."/&gt; elements in the
      DOM and creates a corresponding attribute in its parent.
      For example, the following DOM
      &lt;myelem&gt;
        &lt;param name="abc" attr="bcd"/&gt;
      &lt;/myelem&gt;
      
      it will become
      
      &lt;myelem bcd="efg"&gt;
        &lt;param name="abc" attr="bcd"/&gt;
      &lt;/myelem&gt;
      
      where efg is the value of the abc parameter that was
      supplied by the JSP author. If the parameter named abc does not exsist,
      the attribute bcd is removed.
      
      This may be used to configure the page flow from a jsp, e.g.
      
        &lt;button label="OK" action="validate" handler="..."&gt;
          &lt;param name="successPage" attr="forward"/&gt;
        &lt;/button&gt;
      
      will create a forward attribute to the button element whose value is supplied by the jsp author
      via the renderParam tag, e.g.
      
        &lt;wcf:renderParam name="successPage" value="/somepage.jsp"/&gt;
      </description>
<attribute>
<name>id</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>der renderId Stylesheet Parameter</description>
</attribute>
<attribute>
<name>ref</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>
        Name of the Session Attribute that contains the Component to be rendered.
      </description>
</attribute>
<attribute>
<name>xslUri</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>
        Path of the XSLT stylesheet to use, relative to the application context.
        There may be different stylesheets for different Locales, the
        stylesheet will be choosen upon similar rules to ResourceBundle.
        
        Example: xslUri="/WEB-INF/mystyle.xsl". For a german
        Browser WCF will try to load /WEB-INF/mystyle_de.xsl.
        If this fails, it will load /WEB-INF/mystyle.xsl.
      </description>
</attribute>
<attribute>
<name>xslCache</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>true, if the stylesheet shall be compiled once and then reused. This gives better
       performance but makes it difficult to develop the stylesheets. Use true for production
       and false for development</description>
</attribute>
</tag>
<tag>
<name>renderParam</name>
<tag-class>com.tonbeller.wcf.component.RendererParameterTag</tag-class>
<body-content>tagdependent</body-content>
<description>
       Adds an XSL parameter for the the render tag. If used inside a
       render tag, the parameter is local to that transformation. Otherwise
       the scope attribute specifies the scope of the parameter.
       
       The value may be provided as literal, or as expression (starting with "${").
    </description>
<attribute>
<name>name</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the parameter</description>
</attribute>
<attribute>
<name>value</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Value of the parameter. If value starts with '${' its interpreted as EL expression, otherwise its taken literally</description>
</attribute>
<attribute>
<name>scope</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>The scope of the parameter, one of 'request' (default), 'session', 'application'.</description>
</attribute>
</tag>
<tag>
<name>scriptbutton</name>
<tag-class>com.tonbeller.wcf.toolbar.ScriptButtonTag</tag-class>
<body-content>empty</body-content>
<description>A toolbar button that is bound to a boolean bean property</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>ID of the button. The button may be accessed in EL as TOOLBAR_ID.buttons.BUTTON_ID</description>
</attribute>
<attribute>
<name>img</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the image to use. The generated URLs are APPCONTEXT/wcf/toolbar/IMG-up.png and APPCONTEXT/wcf/toolbar/IMG-down.png</description>
</attribute>
<attribute>
<name>radioGroup</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of a radio group. At most one button of a group may be pressed.</description>
</attribute>
<attribute>
<name>tooltip</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>name of the tooltip in the toolbars ResourceBundle</description>
</attribute>
<attribute>
<name>visibleRef</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to a boolean property. The button will be visible only, if that property is true</description>
</attribute>
<attribute>
<name>model</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to a boolean property</description>
</attribute>
</tag>
<tag>
<name>separator</name>
<tag-class>com.tonbeller.wcf.toolbar.ToolSeparatorTag</tag-class>
<body-content>empty</body-content>
<description>Adds space between toolbar buttons</description>
<attribute>
<name>size</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>width in pixel</description>
</attribute>
<attribute>
<name>visibleRef</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that evaluates to a boolean property. The button will be visible only, if that property is true</description>
</attribute>
</tag>
<tag>
<name>table</name>
<tag-class>com.tonbeller.wcf.table.TableComponentTag</tag-class>
<body-content>tagdependent</body-content>
<description>Creates a table component. This component does not produce visible output directly, it must be rendered via the WCF render tag.</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>model</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that resolves to a com.tonbeller.wcf.table.TableModel</description>
</attribute>
</tag>
<tag>
<name>toolbar</name>
<tag-class>com.tonbeller.wcf.toolbar.ToolBarTag</tag-class>
<body-content>JSP</body-content>
<description>Creates a toolbar component. Buttons are defined via nested Elements:
    formbuttonpushbuttonscriptbuttonimgbuttonseparator
    This component does not produce visible output directly, it must be rendered via the WCF render tag.</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>bundle</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>ResourceBundle for tooltips</description>
</attribute>
</tag>
<tag>
<name>tree</name>
<tag-class>com.tonbeller.wcf.tree.TreeComponentTag</tag-class>
<body-content>EMPTY</body-content>
<description>Creates a tree component. This component does not produce visible output directly, it must be rendered via the WCF render tag.</description>
<attribute>
<name>id</name>
<required>true</required>
<rtexprvalue>false</rtexprvalue>
<description>Name of the Session Attribute that is created by this tag</description>
</attribute>
<attribute>
<name>visible</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>Sets the visible property of the component. The WCF Render tag will not show a component whose visible flag is false</description>
</attribute>
<attribute>
<name>model</name>
<required>false</required>
<rtexprvalue>false</rtexprvalue>
<description>EL expression that resolves to a com.tonbeller.wcf.tree.TreeModel</description>
</attribute>
</tag>
</taglib>
